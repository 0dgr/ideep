diff --git a/chainer/variable.py b/chainer/variable.py
index 7372eff8e..87a4a89e0 100644
--- a/chainer/variable.py
+++ b/chainer/variable.py
@@ -18,10 +18,10 @@ def _check_grad_type(func, x, gx):
     if x.data is None or gx is None:
         # ``x.data is None`` implies that the data array is not retained
         return
-    if not isinstance(gx, type(x.data)):
-        msg = ('Type of data and grad mismatch\n%s != %s' %
-               (type(x.data), type(gx)))
-        typ = TypeError
+#    if not isinstance(gx, type(x.data)):
+#        msg = ('Type of data and grad mismatch\n%s != %s' %
+#               (type(x.data), type(gx)))
+#        typ = TypeError
     elif gx.dtype != x.data.dtype:
         msg = ('Dtype of data and grad mismatch\n%s != %s' %
                (x.data.dtype, gx.dtype))
@@ -437,11 +437,11 @@ class Variable(object):
                 kwargs, ('name', None), ('grad', None),
                 ('requires_grad', True))
 
-        if (data is not None and
-                not isinstance(data, (numpy.ndarray, cuda.ndarray))):
-            msg = '''numpy.ndarray or cuda.ndarray are expected.
-Actual: {0}'''.format(type(data))
-            raise TypeError(msg)
+#        if (data is not None and
+#                not isinstance(data, (numpy.ndarray, cuda.ndarray))):
+#            msg = '''numpy.ndarray or cuda.ndarray are expected.
+#Actual: {0}'''.format(type(data))
+#            raise TypeError(msg)
 
         # Use a list as a data structure to hold the data array indirectly to
         # abstract its initialized/uninitialized state.
